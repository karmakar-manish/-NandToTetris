// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        Mux16(a= x, b[0..15]=false, sel= zx, out= Xout);
        Not16(in=Xout , out= notXout);
        Mux16(a= Xout, b=notXout , sel= nx, out= tempXout);

        Mux16(a= y, b[0..15]=false, sel= zy, out= Yout);
        Not16(in=Yout , out= notYout);
        Mux16(a= Yout, b=notYout , sel= ny, out= tempYout);

        Add16(a=tempXout , b= tempYout, out= XplusY);
        And16(a=tempXout , b= tempYout, out= XandY);

        Mux16(a=XandY , b=XplusY , sel=f , out= fout);
        Not16(in=fout , out=notFout );

        Mux16(a= fout, b=notFout , sel=no , out=out );
        

        //Now we will design for the ng and zr pins
        // Make a copy of out, name it out1, in order to continue to calculate other outputs
        Mux16(a=fout , b=notFout , sel=no , out=out1 );

        //for ng
        Not16(in=out1 , out[15]=t );
        Not(in= t, out= ng);

        //for zr
        Not16(in= out1, out=notout1 );
        Inc16(in= notout1, out[15]=t1 );
        Not(in= t1, out=notT1 );
        And(a= t, b=notT1 , out= zr);
    
}



