// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    //Look to  diagram for better explanation
    Not(in= instruction[15], out=Notio );
    And(a=instruction[15] , b=instruction[5] , out=loadAtemp );
    Or(a= Notio, b=loadAtemp , out=loadA );

    Mux16(a=instruction, b=ALUout , sel=instruction[15] , out=M1out );
    ARegister(in=M1out , load=loadA , out=Aout );

    And(a=instruction[4] , b=instruction[15], out= loadB);
    DRegister(in=ALUout , load=loadB , out=Dout );

    //a=0 means A register
    //a=1 means M register
    Mux16(a=Aout , b=inM , sel=instruction[12] , out=M2out );

    //now connect the pins  of the ALU
    ALU(x=Dout , y=M2out , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] ,
     ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=ALUout , zr=zero , ng=neg );
    
    //doing this so that we dont get error
    Not16(in=ALUout , out=temp1 );
    Not16(in=temp1 , out= outM);    //first output of CPU

    //for the jump conditions, (j1,j2,j3)
    Not(in=neg , out=notneg );
    Not(in=zero , out=notzero );
    And(a= notzero, b=notneg , out=pos );
    //for j3
    And(a=pos , b=instruction[0] , out=greatertemp );
    And(a=greatertemp , b=instruction[15] , out=greater);
    //for j2
    And(a=zero , b=instruction[1] , out=equaltemp );
    And(a=equaltemp , b=instruction[15] , out=equal);
    //for j3
    And(a=neg , b=instruction[2] , out=lesstemp );
    And(a=lesstemp , b=instruction[15] , out=less);

    Or(a= equal, b=less , out=jmptemp );
    Or(a= greater, b=jmptemp , out=jmp );   //jump condition

    Not(in= jmp, out=notjmp );  //not jump condition

    //now set the  PC
    //if jump, it means that we need to load the next address stored in A register
    //if notjump, it means go sequentially in the program, add 1
    PC(in= Aout, load=jmp , inc=notjmp , reset=reset , out[0..14]=pc ); //second output of CPU

    //did this  just to rename the output pin
    Not16(in=Aout , out=temp2 );
    Not16(in=temp2 , out[0..14]=addressM) ; //third output of CPU

    //for d3, whether to write in RAM
    And(a=instruction[3] , b=instruction[15] , out=writeM );    //fourth output of CPU
    
}
